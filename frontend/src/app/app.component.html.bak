<div class="app-gradient min-h-screen pb-24">
	<header class="relative">
		<div class="mx-auto flex max-w-6xl flex-col gap-10 px-6 pt-16 lg:pt-24">
			<div class="max-w-3xl">
				<p class="text-sm uppercase tracking-[0.35em] text-primary-300/80">Bank Statement Converter</p>
				<h1 class="mt-4 text-4xl font-bold leading-tight text-white sm:text-5xl">
					Turn PDF statements into clean spreadsheets in seconds
				</h1>
				<p class="mt-5 text-lg leading-relaxed text-slate-300">
					Upload a bank statement in PDF format, preview every transaction with confidence, and export polished Excel or CSV files ready for your accounting workflow.
				</p>
			</div>

			<div class="grid gap-6 md:grid-cols-3">
				<article
					*ngFor="let step of steps; index as idx"
					class="rounded-2xl border border-white/10 bg-white/5 p-6 backdrop-blur-sm transition hover:border-primary-400/70"
				>
					<div class="flex items-start gap-4">
						<span class="flex h-10 w-10 shrink-0 items-center justify-center rounded-full bg-primary-500/80 text-lg font-semibold text-white">
							{{ idx + 1 }}
						</span>
						<div>
							<h3 class="text-lg font-semibold text-white">{{ step.title }}</h3>
							<p class="mt-2 text-sm leading-relaxed text-slate-300">{{ step.description }}</p>
						</div>
					</div>
				</article>
			</div>
		</div>
	</header>

	<main class="mx-auto mt-12 flex max-w-6xl flex-col gap-10 px-6 pb-24">
		<section class="rounded-3xl border border-white/10 bg-slate-900/70 p-8 shadow-2xl shadow-primary-900/30">
			<div class="flex flex-col gap-8 lg:flex-row lg:items-center">
				<div class="flex-1 space-y-4">
					<h2 class="text-2xl font-semibold text-white">Upload a statement to get started</h2>
					<p class="text-base leading-relaxed text-slate-300">
						Your PDF never leaves this session. We parse it securely, keep data in-memory for 30 minutes, and wipe everything when you reset or close the tab.
					</p>
					<ul class="space-y-3 text-sm text-slate-300">
						<li class="flex items-center gap-3">
							<span class="inline-flex h-7 w-7 items-center justify-center rounded-full bg-primary-500/20 text-primary-200">‚úì</span>
							<span>Supports machine-readable PDF statements up to 10&nbsp;MB.</span>
						</li>
						<li class="flex items-center gap-3">
							<span class="inline-flex h-7 w-7 items-center justify-center rounded-full bg-primary-500/20 text-primary-200">‚úì</span>
							<span>Automatic column mapping for dates, descriptions, debits, credits, and balances.</span>
						</li>
						<li class="flex items-center gap-3">
							<span class="inline-flex h-7 w-7 items-center justify-center rounded-full bg-primary-500/20 text-primary-200">‚úì</span>
							<span>Warnings highlight rows that need a quick double-check before export.</span>
						</li>
					</ul>
				</div>

				<div class="flex-1">
					<div
						class="group relative rounded-2xl border-2 border-dashed border-slate-600 bg-slate-950/70 p-8 text-center transition hover:border-primary-400 hover:bg-primary-400/5"
						[ngClass]="{ 'border-primary-400': isDragging, 'bg-primary-500/10': isDragging }"
						(dragover)="onDragOver($event)"
						(dragleave)="onDragLeave($event)"
						(drop)="onDrop($event)"
					>
						<input #fileInput type="file" accept="application/pdf" class="sr-only" (change)="onFileChange($event)" />
						<div class="flex flex-col items-center gap-4">
							<span class="inline-flex h-14 w-14 items-center justify-center rounded-full bg-primary-500/20 text-primary-100">
								<svg xmlns="http://www.w3.org/2000/svg" class="h-7 w-7" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="1.5">
									<path stroke-linecap="round" stroke-linejoin="round" d="M3 15.75V4.5a1.5 1.5 0 0 1 1.5-1.5h8.379c.398 0 .78.158 1.061.44l5.62 5.62a1.5 1.5 0 0 1 .44 1.06v5.63M3 15.75l3.5 3.5m-3.5-3.5h5.25M21 15.75l-3.5 3.5M21 15.75h-5.25M8.25 19.25h7.5M12 10.5v5.25" />
								</svg>
							</span>
							<div class="text-sm text-slate-300">
								<span>Drag &amp; drop your PDF here, or</span>
								<button type="button" class="ml-1 font-semibold text-primary-200 underline decoration-dotted underline-offset-4" (click)="triggerFileDialog()">
									browse your files
								</button>
							</div>
							<p class="text-xs text-slate-400">Maximum size: 10&nbsp;MB ¬∑ PDF only</p>
							<p *ngIf="currentFileName" class="text-xs text-primary-200">Selected: {{ currentFileName }}</p>
						</div>
					</div>
				</div>
			</div>

			<div class="mt-8 space-y-4">
				<div *ngIf="status === 'uploading'" class="flex items-center gap-4 rounded-2xl border border-primary-500/30 bg-primary-500/10 p-4 text-sm text-primary-100">
					<span class="inline-flex h-4 w-4 animate-spin rounded-full border-2 border-primary-200 border-t-transparent"></span>
					Parsing your statement‚Ä¶ this usually takes just a moment.
				</div>

				<div *ngIf="status === 'uploaded'" class="rounded-2xl border border-primary-500/20 bg-primary-500/5 p-6">
					<h3 class="text-lg font-semibold text-white mb-3">Choose how to proceed:</h3>
					<div class="flex flex-wrap gap-4">
						<button
							type="button"
							class="flex-1 min-w-[200px] rounded-xl bg-primary-500 px-6 py-3 text-sm font-semibold text-white shadow-lg shadow-primary-500/30 transition hover:bg-primary-400"
							(click)="parseDirectly()"
						>
							<div class="flex flex-col items-center gap-2">
								<span class="text-2xl">‚ö°</span>
								<span>Parse & Continue</span>
								<span class="text-xs font-normal text-primary-100">Use all transactions as-is</span>
							</div>
						</button>
						<button
							type="button"
							class="flex-1 min-w-[200px] rounded-xl border-2 border-primary-400/40 bg-slate-800/50 px-6 py-3 text-sm font-semibold text-white transition hover:border-primary-400 hover:bg-slate-800"
							(click)="inspectTransactions()"
						>
							<div class="flex flex-col items-center gap-2">
								<span class="text-2xl">üîç</span>
								<span>Inspect & Select</span>
								<span class="text-xs font-normal text-slate-300">Review and choose transactions</span>
							</div>
						</button>
					</div>
				</div>

				<div *ngIf="infoMessage && status !== 'uploaded'" class="flex items-center gap-3 rounded-2xl border border-emerald-400/20 bg-emerald-400/10 p-4 text-sm text-emerald-100">
					<span class="text-base">‚úî</span>
					<span>{{ infoMessage }}</span>
				</div>

				<div *ngIf="errorMessage" class="flex items-start gap-3 rounded-2xl border border-rose-500/40 bg-rose-500/15 p-4 text-sm text-rose-100">
					<span class="text-lg">‚ö†Ô∏è</span>
					<span>{{ errorMessage }}</span>
				</div>

				<div *ngIf="warnings.length > 0" class="rounded-2xl border border-amber-400/30 bg-amber-500/10 p-4 text-sm text-amber-100">
					<h3 class="font-semibold text-amber-100">Heads up! We found {{ warnings.length }} warning(s):</h3>
					<ul class="mt-2 space-y-1">
						<li *ngFor="let warning of warnings">‚Ä¢ {{ warning }}</li>
					</ul>
				</div>
			</div>
		</section>

		<section *ngIf="summary as totals" class="grid gap-4 md:grid-cols-3">
			<article class="rounded-2xl border border-white/10 bg-white/5 p-6 text-white">
				<p class="text-sm text-slate-300">Rows detected</p>
				<p class="mt-2 text-3xl font-semibold">{{ totals.rowCount | number }}</p>
				<p class="mt-1 text-xs uppercase tracking-[0.3em] text-slate-400">Transactions parsed</p>
			</article>
			<article class="rounded-2xl border border-white/10 bg-white/5 p-6 text-white">
				<p class="text-sm text-slate-300">Total debits</p>
				<p class="mt-2 text-3xl font-semibold text-rose-200">{{ formatAmount(totals.totalDebit) }}</p>
				<p class="mt-1 text-xs uppercase tracking-[0.3em] text-slate-400">Outflows</p>
			</article>
			<article class="rounded-2xl border border-white/10 bg-white/5 p-6 text-white">
				<p class="text-sm text-slate-300">Total credits</p>
				<p class="mt-2 text-3xl font-semibold text-emerald-200">{{ formatAmount(totals.totalCredit) }}</p>
				<p class="mt-1 text-xs uppercase tracking-[0.3em] text-slate-400">Inflows</p>
			</article>
		</section>

		<section *ngIf="transactions.length > 0" class="rounded-3xl border border-white/10 bg-slate-900/80 shadow-xl shadow-primary-900/20">
			<div class="flex flex-col gap-4 border-b border-white/10 px-6 py-6 md:flex-row md:items-center md:justify-between">
				<div>
					<h2 class="text-2xl font-semibold text-white">Transaction preview</h2>
					<p class="text-sm text-slate-400">Showing {{ transactions.length | number }} row(s). Download to work offline anytime.</p>
				</div>
				<div class="flex flex-wrap gap-3">
					<button type="button" class="inline-flex items-center gap-2 rounded-full bg-primary-500 px-5 py-2 text-sm font-semibold text-white shadow-lg shadow-primary-500/30 transition hover:bg-primary-400" (click)="download('xlsx')">
						<span>‚¨á</span>
						<span>Download Excel</span>
					</button>
					<button type="button" class="inline-flex items-center gap-2 rounded-full border border-white/20 px-5 py-2 text-sm font-semibold text-white transition hover:border-primary-300/70 hover:text-primary-200" (click)="download('csv')">
						<span>‚¨á</span>
						<span>Download CSV</span>
					</button>
					<button type="button" class="inline-flex items-center gap-2 rounded-full border border-white/10 px-5 py-2 text-sm font-semibold text-slate-300 transition hover:border-white/30 hover:text-white" (click)="reset()">
						<span>‚Ü∫</span>
						<span>Start over</span>
					</button>
				</div>
			</div>

			<div class="overflow-hidden">
					<div class="max-h-[480px] overflow-auto">
					<table class="min-w-full divide-y divide-white/10 text-sm text-slate-200">
						<thead class="bg-white/5 text-left text-xs font-semibold uppercase tracking-wide text-slate-300">
							<tr>
								<th scope="col" class="px-4 py-3">Date</th>
								<th scope="col" class="px-4 py-3">Description</th>
								<th scope="col" class="px-4 py-3 text-right">Debit</th>
								<th scope="col" class="px-4 py-3 text-right">Credit</th>
								<th scope="col" class="px-4 py-3 text-right">Balance</th>
								<th scope="col" class="px-4 py-3">Notes</th>
							</tr>
						</thead>
						<tbody class="divide-y divide-white/5">
							<tr *ngFor="let txn of transactions" class="transition hover:bg-white/5" [ngClass]="{ 'bg-amber-500/10': txn.warnings.length > 0 }">
								<td class="whitespace-nowrap px-4 py-3 font-mono text-xs text-slate-300">{{ txn.date | date: 'MMM d, yyyy' }}</td>
								<td class="max-w-md px-4 py-3 text-sm text-white">
									<span class="block break-words">{{ txn.description }}</span>
								</td>
								<td class="whitespace-nowrap px-4 py-3 text-right text-sm font-medium" [class.text-rose-200]="txn.debit">{{ formatAmount(txn.debit) }}</td>
								<td class="whitespace-nowrap px-4 py-3 text-right text-sm font-medium" [class.text-emerald-200]="txn.credit">{{ formatAmount(txn.credit) }}</td>
								<td class="whitespace-nowrap px-4 py-3 text-right text-sm text-slate-200">{{ formatAmount(txn.balance) }}</td>
								<td class="px-4 py-3 text-xs text-amber-200">
									<ng-container *ngIf="txn.warnings.length; else cleanRow">{{ txn.warnings.join(', ') }}</ng-container>
									<ng-template #cleanRow><span class="text-slate-500">‚Äî</span></ng-template>
								</td>
							</tr>
						</tbody>
					</table>
				</div>
			</div>
		</section>

		<section *ngIf="status === 'idle' && transactions.length === 0" class="rounded-3xl border border-dashed border-white/15 bg-slate-900/60 p-8 text-center text-sm text-slate-300">
			Ready when you are‚Äîupload a PDF statement above to kick off the conversion.
		</section>
	</main>
</div>
